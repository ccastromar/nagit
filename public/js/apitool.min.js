let app=(function(){let comboSel=document.getElementById("comboapi");let info=document.getElementById("info");let help=document.getElementById("help");let language="en";let divTop=document.querySelector("#scrollTop");function g(){if(window.scrollY>=300){divTop.classList.add("visible")}else{divTop.classList.remove("visible")}}function a(){if(window.scrollY!=0){setTimeout(function(){window.scrollTo(0,window.scrollY-30);a()},5)}}window.addEventListener("scroll",g);divTop.addEventListener("click",a);function d(j){let allInputs=document.getElementsByTagName("INPUT");for(let i=0;i<allInputs.length;i++){let inp=allInputs[i];if(inp.type==="text"){if(inp.id==="nishost"||inp.id==="nisport"){continue}inp.style.backgroundColor="#dddddd";inp.disabled=true}}for(let i=0;i<j.length;i++){let e=document.getElementById(j[i]);e.disabled=false;e.style.backgroundColor="#d0f0d0"}}function f(j){info.innerHTML='<i class="fa fa-info-circle"></i> '+j}function c(j){let i=comboSel.value;if(i==-1){return}let obj=apitool.comboList[i];let inputText=obj.input;d(inputText);f(obj.info[j])}function b(){let i=comboSel.value;if(i==-1){return}let obj=apitool.comboList[i];let fn=obj.fn;apitool[fn]();console.log("fn "+fn)}function h(){help.innerHTML=""}return{selchange:c,selcall:b,closeHelp:h}})();
/*!
 * API Tool Library for NEM API. It validates the input data, sends GET or POST requests and pretty prints the response.
 * Copyright (c) 2018 Carlos Castro Martos
 * Released under the MIT license
 * Date: 2018-11-16
 */
;let apitool=(function(){let version="1.1.0";let language="en";const g=["Unknown status","NIS is stopped","NIS is starting","NIS is running","NIS is booting the local node (implies NIS is running)","The local node is booted (implies NIS is running)","The local node is synchronized (implies NIS is running and the local node is booted)","NIS local node does not see any remote NIS node (implies running and booted)","NIS is currently loading the block chain from the database. In this state NIS cannot serve any requests"];let multiLabel={en:{ERR_NO_RESP:"No response from server",ERR_JSON:"There was en error parsing the response",HIST_DATE:"Date",HIST_FUNC:"Function",HIST_STAT:"Status",HIST_IN:"Input",HIST_OUT:"Output"},es:{ERR_NO_RESP:"No hubo respuesta del servidor",ERR_JSON:"Hubo un error parseando la respuesta",HIST_DATE:"Fecha",HIST_FUNC:"Función",HIST_STAT:"Estado",HIST_IN:"Entrada",HIST_OUT:"Salida"}};function S(ad){return multiLabel[language][ad]}let comboList=[{fn:"currentBlock",input:[],info:{en:"Gets current block height",es:"Obtiene el número de bloque actual"}},{fn:"getBlock",input:["blocknumber"],info:{en:"Gets block data at height",es:"Obtiene los datos del bloque para un número de bloque dado"}},{fn:"getLastNamespaces",input:["pagesize"],info:{en:"Gets last namespaces created in nem. You must enter a pagesize from 25 to 100 elements",es:"Obtiene los últimos namespaces creados. Debe informar un total de 25 a 100 elementos por página"}},{fn:"generateAddress",input:[],info:{en:"Generates wallet data (address, public & private keys). This will be saved for later testing.",es:"Genera los datos de una wallet (address, clave pública y privada). Esto se guardará para hacer pruebas"}},{fn:"getAccount",input:["address"],info:{en:"Gets account data for a NEM address",es:"Obtiene los datos de una cuenta para una NEM address concreta"}},{fn:"getNamespacesFromAddress",input:["address"],info:{en:"Gets namespaces belonging to a NEM address",es:"Obtiene los namespaces que pertenecen a una NEM address concreta"}},{fn:"getMosaicsFromAddress",input:["address"],info:{en:"Gets mosaics belonging to a NEM address",es:"Obtiene los mosaicos que pertenecen a una NEM address concreta"}},{fn:"getMosaicsFromNamespace",input:["namespace"],info:{en:"Gets mosaics belonging to a namespace",es:"Obtiene los mosaicos que pertenecen a un namespace dado"}},{fn:"getStatusServer",input:[],info:{en:"Gets NIS Server status",es:"Obtiene el estado del servidor NIS"}},{fn:"getIncomingTransactionsFromAddress",input:["address"],info:{en:"Gets last 25 incoming transactions with NEM address as recipient",es:"Obtiene las últimas 25 transacciones que tienen una NEM address como destinatario"}},{fn:"getOutgoingTransactionsFromAddress",input:["address"],info:{en:"Gets last 25 outgoing transactions with NEM address as sender",es:"Obtiene las últimas 25 transacciones que ha enviado una NEM address"}},{fn:"getHarvestingInfoFromAddress",input:["address"],info:{en:"Gets harvesting information for the NEM address",es:"Obtiene información de recolección (harvesting) de una NEM address dada"}},{fn:"getTenBlocksAfterHeight",input:["blocknumber"],info:{en:"Gets 10 block data after a block height",es:"Obtiene los datos de 10 bloques siguientes a un número de bloque dado"}},{fn:"getNamespace",input:["namespace"],info:{en:"Gets namespace definition",es:"Obtiene la definición de un namespace"}},{fn:"prepareTransaction",input:["amount","recipient","publickey","privatekey"],info:{en:"Only for testing with your local node. Never expose or share your private key with untrusted websites or unknown NIS Nodes",es:"Sólo para pruebas con su nodo local. Nunca muestre o comparta su clave privada con sitios web que no confía o nodos NIS desconocidos"}},{fn:"generateQR",input:["memo","amount","address"],info:{en:"Generates a QR code for scanning given a NEM address, an amount and a memo",es:"Genera un código QR para escanear dada una NEM address, una cantidad y un mensaje"}},{fn:"getNodeInformation",input:[],info:{en:"Gets basic information about the selected NIS Node",es:"Obtiene información básica sobre el servidor NIS seleccionado"}},{fn:"getExtendedInfo",input:[],info:{en:"Gets extended information about the selected NIS Node",es:"Obtiene información ampliada sobre el servidor NIS seleccionado"}},{fn:"getPeerList",input:[],info:{en:"Gets a list of all known nodes in the neighborhood",es:"Obtiene una lista de todos los nodos conocidos cercanos"}},{fn:"getNodeExperiences",input:[],info:{en:"Gets a list of node experiences from another node",es:"Obtiene una lista de experiencias de nodos de otro nodo"}},{fn:"getHeartbeat",input:[],info:{en:"Gets information if a node is up and responsive",es:"Obtiene información de si el nodo está arrancado y respondiendo"}},{fn:"getAccountFromPK",input:["publickey"],info:{en:"Gets account information from a public key",es:"Obtiene información de una cuenta a partir de la clave pública"}},{fn:"lockAccount",input:["privatekey"],info:{en:"Only for local testing. Never exposes your private key. Unlocks an account to enable harvesting",es:"Sólo para pruebas locales. Nunca proporcione su clave privada. Desbloquea una cuenta para activar la recolección (harvesting)"}},{fn:"unlockAccount",input:["privatekey"],info:{en:"Only for local testing. Never exposes your private key. Locks an account to disable harvesting",es:"Sólo para pruebas locales. Nunca proporcione su clave privada. Bloquea una cuenta para desactviar la recolección (harvesting)"}},{fn:"getNetworkTimeFromNode",input:[],info:{en:"Get network time from a NIS Node in milliseconds",es:"Obtiene el tiempo de red a partir de un Nodo NIS en milisegundos"}},{fn:"getMosaicSupply",input:["namespace","mosaicname"],info:{en:"Get mosaic supply from mosaicId (namespace + mosaic name)",es:"Obtiene el número de mosaicos disponibles a partir de un mosaicId (namespace + nombre mosaico)"}}];const o=Date.UTC(2015,2,29,0,6,25,0);let url="https://shibuya.supernode.me:7891";let network=document.getElementById("defaultnet");if(network.value==="M"){url="https://shibuya.supernode.me:7891"}else{url="https://nis-testnet.44uk.net:7891"}let historyRequests=[];let output={};let spinner=document.getElementById("spin0");let historyDiv=document.getElementById("historyDiv");let histDetail=document.getElementById("histDetail");let logs=document.getElementById("logs0");let comboSel=document.getElementById("comboapi");let address=document.getElementById("address");let blocknumber=document.getElementById("blocknumber");let namespace=document.getElementById("namespace");let mosaicname=document.getElementById("mosaicname");let amount=document.getElementById("amount");let publickey=document.getElementById("publickey");let privatekey=document.getElementById("privatekey");let recipient=document.getElementById("recipient");let pagesize=document.getElementById("pagesize");let nishost=document.getElementById("nishost");let nisport=document.getElementById("nisport");let defaultNodeDiv=document.getElementById("defaultNodeDiv");let customNodeDiv=document.getElementById("customNodeDiv");let mainHist=document.getElementById("collapseHistory");let mainNode=document.getElementById("collapseNode");let historyToggle=document.getElementById("historyToggle");let nodeToggle=document.getElementById("nodeToggle");mainHist.classList.add("collapsed");mainNode.classList.add("collapsed");function I(){window.scrollTo(0,0);mainHist.classList.toggle("collapsed")}function k(){window.scrollTo(0,0);mainNode.classList.toggle("collapsed")}historyToggle.addEventListener("click",I);nodeToggle.addEventListener("click",k);function z(ad){language=ad}function c(){let portNum=7890;try{portNum=parseInt(nisport.value)}catch(ad){}if(nishost.value==""){nishost.focus();return false}if(nisport.value==""){nisport.focus();return false}if(portNum>65535||portNum<=0){nisport.value=7890;nisport.focus();return false}url="http://"+nishost.value+":"+nisport.value;customNodeDiv.classList.add("fa","fa-check-circle");defaultNodeDiv.classList.remove("fa","fa-check-circle")}function x(){return Math.floor((Date.now()/1000)-(o/1000))}function b(){spinner.classList.add("fa","fa-refresh","fa-spin");spinner.style.marginRight="8px"}function p(){spinner.classList.remove("fa","fa-refresh","fa-spin");spinner.style.marginRight="0px"}function t(ad,ae){b();let xhttp=new XMLHttpRequest();let data={};xhttp.onreadystatechange=function(){if(this.readyState==4&&this.status==200){p();let res=JSON.parse(xhttp.responseText);output=res;if(ae){ae()}E(ad,data,res,"GET",url,this.status,network.value);w(res)}else{if(this.readyState==4&&this.status!=200){p();let res={};let errNoResp={Error:S("ERR_NO_RESP")};let errJson={Error:S("ERR_JSON")};if(this.responseText==""){res=errNoResp}else{try{res=JSON.parse(this.responseText)}catch(af){res=errJson}}E(ad,data,res,"GET",url,this.status,network.value);w(res)}}};xhttp.open("GET",url+ad,true);xhttp.setRequestHeader("Content-type","application/json; charset=utf-8");xhttp.send()}function f(ad,ah,ae){b();const ag={Error:S("ERR_NO_RESP")};const af={Error:S("ERR_JSON")};let xhttp=new XMLHttpRequest();let dataStr=JSON.stringify(ah);xhttp.onreadystatechange=function(){let res={};if(this.readyState==4&&this.status==200){p();console.log(this.responseText);if(this.responseText==""){res=af}else{res=JSON.parse(this.responseText)}output=res;if(ae){ae()}E(ad,ah,res,"POST",url,this.status,network.value);w(res)}else{if(this.readyState==4&&this.status!=200){p();if(this.responseText==""){res=ag}else{try{res=JSON.parse(this.responseText)}catch(ai){res=af}}E(ad,ah,res,"POST",url,this.status,network.value);w(res)}}};xhttp.open("POST",url+ad,true);xhttp.setRequestHeader("Content-type","application/json; charset=utf-8");xhttp.send(dataStr)}function E(ae,ai,ah,af,aj,ag,ad){let id=historyRequests.length;let fnId=comboSel.value;let fnName=comboList[fnId].fn;let descNet=(ad==="M")?"Mainnet":"Testnet";let r={id:id,created:new Date(),fnId:fnId,fnName:fnName,verb:af,url:aj,uri:ae,input:ai,output:ah,status:ag,network:descNet};let fn=comboList[r.fnId].fn;historyRequests.push(r);aa()}function aa(){let str='<table class="table-striped table-hover table-fixed" style="height: 150px">';str+='<thead><th style="width:100px !important">'+S("HIST_DATE")+'</th><th style="width:250px !important">'+S("HIST_FUNC")+"</th><th>"+S("HIST_STAT")+"</th><th> </th></tr></thead><tbody>";for(let i=historyRequests.length;i-->0;){let v=historyRequests[i];str+='<tr><td style="width:100px !important">'+v.created.toLocaleDateString()+"</td>";str+='<td style="width:250px !important"><a href="javascript:apitool.loadHistRequest('+i+')">'+v.fnName+"</a></td>";if(v.status===200){str+='<td><span class="text-success">'+v.status+"</span></td>"}else{str+='<td><span class="text-danger">'+v.status+"</span></td>"}str+='<td><i class="fa fa-trash" style="cursor:pointer" onclick="apitool.deleteHist('+i+',this)"></i></td>';str+="</tr>"}str+="</tbody></table>";historyDiv.innerHTML=str}function H(ad){let hist=historyRequests[ad];let str="<strong>"+hist.verb+":</strong> "+hist.uri+"<br>";str+="<strong>"+S("HIST_DATE")+":</strong> "+hist.created.toLocaleString()+"<br>";str+="<strong>"+S("HIST_FUNC")+":</strong> "+hist.fnName+"<br>";str+="<strong>"+S("HIST_STAT")+":</strong> "+hist.status+"<br>";str+="<strong>"+S("HIST_IN")+":</strong> "+JSON.stringify(hist.input)+"<br>";str+="<strong>"+S("HIST_OUT")+":</strong> "+JSON.stringify(hist.output);histDetail.innerHTML=str}function R(ad){historyRequests.splice(ad,1);aa();histDetail.innerHTML=""}function w(ad,ae){logs.style.visibility="visible";logs.innerHTML=prettyJSON.htmlTable(ad);document.querySelector("#outputId").scrollIntoView({behavior:"smooth"})}function M(){network=document.getElementById("defaultnet");if(network.value==="M"){url="https://shibuya.supernode.me:7891"}else{url="https://nis-testnet.44uk.net:7891"}nishost.value="";nisport.value="";defaultNodeDiv.classList.add("fa","fa-check-circle");customNodeDiv.classList.remove("fa","fa-check-circle")}function h(){blocknumber.value="";namespace.value="";memo.value="";amount.value="";recipient.value=""}function j(){address.value="";publickey.value="";privatekey.value=""}function y(){logs.innerHTML=""}function d(){t("/chain/height")}function C(){let blq=blocknumber.value;if(blq==""||isNaN(blq)){blocknumber.focus();blocknumber.value="";return false}let blqnum=parseInt(blq);let data={height:blqnum};f("/block/at/public",data)}function V(){let ps=25;if(pagesize.value==""){pagesize.focus();return false}try{ps=parseInt(pagesize.value)}catch(ad){}if(pagesize.value!=""){t("/namespace/root/page?pageSize="+ps)}}function F(){t("/account/generate",Y)}function Y(){if(!s(output)){address.value=output.address;publickey.value=output.publicKey;privatekey.value=output.privateKey}}function Z(){let adr=address.value;let sanitizedAdr=adr.toUpperCase().replace(/-|\s/g,"");if(adr==""){address.focus();return false}t("/account/get?address="+sanitizedAdr)}function N(){let pk=publickey.value;if(pk==""){pk.focus();return false}t("/account/get/from-public-key?publicKey="+pk)}function n(){let adr=address.value;let sanitizedAdr=adr.toUpperCase().replace(/-|\s/g,"");if(adr==""){address.focus();return false}t("/account/namespace/page?address="+sanitizedAdr)}function L(){let adr=address.value;let sanitizedAdr=adr.toUpperCase().replace(/-|\s/g,"");if(adr==""){address.focus();return false}t("/account/mosaic/definition/page?address="+sanitizedAdr)}function a(){let spc=namespace.value;if(spc==""){namespace.focus();return false}t("/namespace/mosaic/definition/page?namespace="+spc)}function X(){t("/status")}function J(){let adr=address.value;let sanitizedAdr=adr.toUpperCase().replace(/-|\s/g,"");if(adr==""){address.focus();return false}t("/account/transfers/incoming?address="+sanitizedAdr)}function K(){let adr=address.value;let sanitizedAdr=adr.toUpperCase().replace(/-|\s/g,"");if(adr==""){address.focus();return false}t("/account/transfers/outgoing?address="+sanitizedAdr)}function Q(){let adr=address.value;let sanitizedAdr=adr.toUpperCase().replace(/-|\s/g,"");if(adr==""){address.focus();return false}t("/account/harvests?address="+sanitizedAdr)}function A(){let blq=blocknumber.value;if(blq==""||isNaN(blq)){blocknumber.focus();blocknumber.value="";return false}let blqnum=parseInt(blq);let data={height:blqnum};f("/local/chain/blocks-after",data)}function m(){let spc=namespace.value;if(spc==""){namespace.focus();return false}t("/namespace?namespace="+spc)}function l(ad){if(network.value==="M"){return 1744830464|ad}else{if(network.value==="T"){return 2550136832|ad}}return 1610612736|ad}function s(ad){for(let key in ad){if(ad.hasOwnProperty(key)){return false}}return true}function D(){let amountInt=0;if(amount.value==""){amount.focus();return false}amountInt=parseInt(amount.value);if(recipient==""){recipient.focus();return false}let recipientAdr=recipient.value;let pubkey=publickey.value;if(pubkey==""){publickey.focus();return false}let prvkey=privatekey.value;if(prvkey==""){privatekey.focus();return false}let ts=x();let due=network.value==="T"?60:24*60;let deadline=ts+due*60;const ae="4e454d20415049204578616d706c657320666f72206c6561726e696e67";const af=500000;const ad=257;let data={transaction:{timeStamp:x(),amount:amountInt,fee:af,recipient:recipientAdr,type:ad,deadline:deadline,message:{payload:ae,type:1},version:l(1),signer:pubkey,mosaics:[]},privateKey:prvkey};f("/transaction/prepare-announce",data)}function G(){if(address.value==""){address.focus();return false}if(amount.value==""){amount.focus();return false}if(memo.value==""){memo.focus();return false}let data={v:2,type:2,data:{addr:address.value,amount:amount.value,msg:memo.value,name:"QR Code"}};let txt=JSON.stringify(data);let el=kjua({text:txt});let q=logs;if(q.hasChildNodes()){q.removeChild(q.childNodes[0]);q.appendChild(el)}else{q.appendChild(el)}document.querySelector("#outputId").scrollIntoView({behavior:"smooth"})}function P(){t("/node/info")}function ab(){t("/node/extended-info")}function B(){t("/node/peer-list/all")}function T(){t("/node/experiences")}function O(){t("/heartbeat")}function u(){if(privatekey.value==""){privatekey.focus();return false}let data={value:privatekey.value};f("/account/lock",data)}function ac(){if(privatekey.value==""){privatekey.focus();return false}let data={value:privatekey.value};f("/account/unlock",data)}function W(){t("/time-sync/network-time")}function U(){if(namespace.value==""){namespace.focus();return false}if(mosaicname.value==""){mosaicname.focus();return false}let mosaicId=namespace.value+":"+mosaicname.value;let data={mosaicId:mosaicId};t("/mosaic/supply?mosaicId="+mosaicId)}return{comboList:comboList,init:z,delInputCommon:h,delInputWallet:j,delOutputdata:y,setNetwork:M,loadHistRequest:H,deleteHist:R,generateAddress:F,getAccount:Z,getAccountFromPK:N,lockAccount:u,unlockAccount:ac,getNamespacesFromAddress:n,getMosaicsFromAddress:L,getMosaicsFromNamespace:a,currentBlock:d,getBlock:C,getLastNamespaces:V,getStatusServer:X,getNodeInformation:P,getExtendedInfo:ab,getPeerList:B,getNodeExperiences:T,getHeartbeat:O,getIncomingTransactionsFromAddress:J,getOutgoingTransactionsFromAddress:K,getHarvestingInfoFromAddress:Q,getTenBlocksAfterHeight:A,getNamespace:m,prepareTransaction:D,generateQR:G,setNISNode:c,getNetworkTimeFromNode:W,getMosaicSupply:U}})();